#!/usr/bin/env bash

# Age encryption using secrets in 1password vault
# Date: 2025-04-04
# Version: 0.3
#
# Run `age-op -h` for help and examples
#
# For information about age, see https://github.com/FiloSottile/age
# Tested on mac and linux. Tested with age and rage (rust-rage)

# check dependencies
# Change to 'rage' if you prefer
AGE=${AGE:-$(which age)}
OP=${OP:-op}

# Ensure proper cleanup of temporary files, even on unexpected exit
cleanup() {
  if [ -n "$secret" ] && [ -f "$secret" ]; then
    rm -f "$secret"
  fi
}
trap cleanup EXIT INT TERM

# Select private folder for temporary secrets. can be overridden with `-t` flag
# The defaults for linux and macos are readable by owner only
# Returns: temp folder path with no trailing '/'
private_tmp() {
  if [ -d /run/user/$(id -u) ]; then
    echo /run/user/$(id -u)      # linux. folder owned by user with mode 700
  elif [ -d "$TMPDIR" ]; then
    echo "$(echo $TMPDIR | sed 's./$..')"  # macos. owned by user with mode 700. remove trailing slash
  else
    echo "$PWD"
  fi
}
tmppath=$(private_tmp)


# Display help message and quit
# param: ERROR_MESSAGE
# If ERROR_MESSAGE is not empty, exits 1, otherwise exits 0
_help() {
  [ -n "$1" ] && echo "Error: $1\n"
  local ds="\$"
  local prog=$(basename $0)
  cat <<_HELP

age encryption with secret keys in 1password vault

Usage:
   $prog -e -k KEY_PATH [ -o OUTPUT ] [ -t TMPDIR ] [ -a ] [ FILE ]
   $prog -r -k KEY_PATH [ -o OUTPUT ] [ -t TMPDIR ] [ -a ] [ FILE ]
   $prog -d -k KEY_PATH [ -o OUTPUT ] [ -t TMPDIR ] [ FILE ]
   $prog -n -k KEY_PATH
   $prog -h

Options:
   -e            Encrypt using identity (private key)
   -r            Encrypt using recipient (public key)
   -d            Decrypt
   -n            Generate new key
   -k KEY_PATH   1Password key path
   -o OUTPUT     Output file (default: stdout)
   -t TMPDIR     Temporary directory (default: $tmppath)
   -a            Use ASCII armor (PEM format)
   -h            Show help

Examples:

   Encrypt file:
       $prog -e -k KEY_PATH [ -o OUTPUT ] [ -t TMPDIR ] [ -a ] [ FILE ]
           encrypt a single input file FILE using a private key.
           If FILE is '-' or not specified, stdin is encrypted
           If OUTPUT is '-' or not specified, the output is sent to stdout

       $prog -r -k KEY_PATH [ -o OUTPUT ] [ -t TMPDIR ] [ -a ] [ FILE ]
           encrypt a single input file FILE using a public key (as recipient).
           Works with SSH public keys in 'authorized_keys' format.
           If FILE is '-' or not specified, stdin is encrypted
           If OUTPUT is '-' or not specified, the output is sent to stdout

       To encrypt one or more files or folders to a tar file, use
           tar czf - FILE_OR_DIR FILE_OR_DIR ... | $prog -e -k KEY_PATH -o foo.tar.gz.age

   Decrypt file:
       $prog -d -k KEY_PATH [ -o OUTPUT ] [-t TMPDIR ] [ FILE ]
           decrypt a file, or stdin
           If FILE is '-' or not specified, stdin is decrypted
           If OUTPUT is '-' or not specified, the output is sent to stdout

       To decrypt a tar file,
           $prog -d -k KEY_PATH foo.tar.gz.age | tar xzf -

   Generate an age ed25519 key and store it in the 1password vault. The type of the new item will be "Password"
       $prog -n -k KEY_PATH

KEY_PATH should have one of the following formats:
    - 'op://vault/title', 'op://vault/title/field', or 'op://vault/title/section/field'
    In the first case, the field name defaults to 'password'

TMPDIR is the temporary folder where key will be briefly written and quickly removed
    Default is '$tmppath'

1Password configuration:
    For the 1Password cli ('op') to authenticate with a vault, you can do one of the following:
     - For use with a service account, set the environment variable OP_SERVICE_ACCOUNT_TOKEN
     - For use with a 1Password Connect Server, set OP_CONNECT_HOST and OP_CONNECT_TOKEN
     - sign into a local app with "eval ${ds}(op signin)"

Dependencies: Installation instructions and documentation:
  age: https://age-encryption.org
  op (1Password cli): https://developer.1password.com/docs/cli/get-started

_HELP
  [ -n "$1" ] && exit 1 || exit 0
}

# Store key in unique temp file, with access limited to current user
# params: TMPDIR KEY
# returns: path to temp file
store_secret() {
  local tmp_secret=$(mktemp "$1/age-secret.XXXXXX")
  chmod 600 "$tmp_secret"
  echo "$2" > "$tmp_secret"
  echo "$tmp_secret"
}

# Create a new key
# params: KEYPATH
new_key() {
  local keypath="$1"
  local key field out pw title vault field

  ##
  ## Create new key
  ##
  vault=$(echo "$keypath" | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\1|')
  title=$(echo "$keypath" | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\2|')
  field=$(echo "$keypath" | sed -E 's|op://([^/]+)\/([^/]+)\/(.*)|\3|')

  # check if the key path exists so we don't overwrite it.
  # The success case (key is unique) generates an error, so temporarily disable '+e'
  set +e
  key=$($OP item get "$title" "--vault=$vault" 2>/dev/null)
  if [ $? -eq 0 ]; then
    _help "Key vault:$vault title:$title already exists - will not overwrite"
  fi
  set -e
  
  pw="$(age-keygen 2>/dev/null)"
  if [ -z "$pw" ]; then
    _help "Failed to generate key with age-keygen"
  fi
  
  $OP item create --category=password --title="$title" --vault="$vault" "$field=$pw" >/dev/null
  if [ $? -ne 0 ]; then
    _help "Failed to create item in 1Password"
  fi
  
  echo "Created vault:$vault title:$title"
}

cmd=""
input=""
output=""
keypath=""
stdin=0
use_armor=""
secret=""
# putting this in a variable makes it work with zsh
help_regex="^\-h|^--help|^help$"

# Check for required dependencies
if ! command -v "$AGE" >/dev/null 2>&1; then
  _help "Missing 'age' dependency. Please see installation url below."
fi

# 1password cli
if ! command -v "$OP" >/dev/null 2>&1; then
  _help "Missing 'op' dependency. Please see installation url below."
fi

[[ $1 =~ $help_regex ]] && _help

while getopts ':hnredao:k:t:' OPTION; do
  case $OPTION in
    h) _help
        ;;
    n) [ -n "$cmd" ] && _help "Only one of -e, -d, -r, or -n may be used"
        cmd="new"
        ;;
    e) [ -n "$cmd" ] && _help "Only one of -e, -d, -r, or -n may be used"
        cmd="encrypt"
        ;;
    r) [ -n "$cmd" ] && _help "Only one of -e, -d, -r, or -n may be used"
        cmd="recipient"
        ;;
    d) [ -n "$cmd" ] && _help "Only one of -e, -d, -r, or -n may be used"
        cmd="decrypt"
        ;;
    a) use_armor="--armor"
        ;;
    o) output=$OPTARG
        ;;
    k) keypath=$OPTARG
        if [[ ! $keypath =~ ^op://[^/]+/[^/]+/.+$ ]]; then
          # if path has only two segments (vault & title), append appropriate field
          if [[ $keypath =~ ^op://[^/]+/[^/]+$ ]]; then
            if [ "$cmd" = "recipient" ]; then
              keypath="$keypath/public key"
            else
              keypath="$keypath/password"
            fi
          else
            _help "Invalid key path '$keypath'"
          fi
        fi
        ;;
    t) tmppath=$OPTARG
        [ ! -d "$tmppath" ] && _help "Invalid tmp folder: '$tmppath' does not exist"
        ;;
    ?) _help "" ;;
  esac
done
shift "$(($OPTIND -1))"

[ -z "$cmd" ] && _help "One of -e, -d, -r, or -n must be used"
[ -z "$keypath" ]  && _help "keypath is required. Should be of the form op://vault/title[/field]"

if [ "$cmd" = "new" ]; then
  new_key "$keypath"
else

  ##
  ## Encrypt or Decrypt
  ##
  if [ -z "$1" ] || [ "$1" = "-" ]; then
    stdin=1
  else
    input="$1"
    [ ! -r "$input" ] && _help "Missing or unreadable input file '$input'"
    # don't re-encrypt file ending in .age
    if [ "$cmd" = "encrypt" -o "$cmd" = "recipient" ] && [[ $input =~ \.age$ ]]; then
      _help "Input file may not end in '.age'"
    fi
  fi
  
  if [ -z "$output" ] || [ "$output" = "-" ]; then
    output=/dev/stdout
  fi

  # Fetch key from 1Password
  key=$($OP read "$keypath" 2>/dev/null)
  if [ $? -ne 0 ] || [ -z "$key" ]; then
    _help "Invalid keypath '$keypath' or unable to read key from 1Password"
  fi
  
  # Prepare age command options
  age_opts=""
  [ -n "$use_armor" ] && age_opts="$age_opts $use_armor"
  
  # Execute appropriate age command based on the operation
  if [ "$cmd" = "recipient" ]; then
    # For recipient encryption with SSH public key, use -r flag directly
    if [ $stdin -eq 1 ]; then
      $AGE --encrypt -r "$key" $age_opts >"$output"
      if [ $? -ne 0 ]; then
        _help "Age encryption failed"
      fi
    else
      $AGE --encrypt -r "$key" $age_opts <"$input" >"$output"
      if [ $? -ne 0 ]; then
        _help "Age encryption failed"
      fi
    fi
  else
    # For encryption with private key or decryption, store key in temporary file
    secret=$(store_secret "$tmppath" "$key")

    if [ $stdin -eq 1 ]; then
      $AGE --${cmd} -i "$secret" $age_opts >"$output"
      result=$?
    else
      $AGE --${cmd} -i "$secret" $age_opts <"$input" >"$output"
      result=$?
    fi
    
    # Check for age errors
    if [ $result -ne 0 ]; then
      rm -f "$secret"
      secret=""
      if [ "$cmd" = "decrypt" ]; then
        _help "Age decryption failed. Check that you are using the correct key."
      else
        _help "Age encryption failed"
      fi
    fi
    
    # Cleanup is handled by trap
    rm -f "$secret"
    secret=""
  fi
fi

unset _err cmd input key keypath output secret stdin tmppath use_armor
